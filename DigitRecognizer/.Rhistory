train.data <- import.csv("train.csv")
test.data <- train.data[30001:42000,]
train.data <- train.data[1:30000,]
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
get_pred_svm(train.data,test.data)
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
get_pred_svm(train.data,test.data)
levels(as.factor(train.data$label))
levels(as.factor(test.data$label))
str(test.data)
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
get_pred_svm(train.data,test.data)
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
get_pred_svm(train.data, test.data)
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
get_pred_svm(train.data, test.data)
get_pred_svm <- function(train, test){
digit.class.train <- as.factor(train$label)
train.features <- get_PCA(train)
digit.class.test <- as.factor(test$label)
test.features <- get_PCA(test)
svm.model <- svm(train.features, digit.class.train, cost = 100, gamma = 0.0001)
svm.pred <- predict(svm.model, train.features)
table(pred = svm.pred, true = digit.class.train)
}
get
get_pred_svm(train.data, test.data)
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
get_pred_svm <- function(train, test){
digit.class.train <- as.factor(train$label)
train.features <- get_PCA(train)
digit.class.test <- as.factor(test$label)
test.features <- get_PCA(test)
svm.model <- svm(train.features, digit.class.train, cost = 100, gamma = 0.0001)
svm.pred <- predict(svm.model, test.features)
table(pred = svm.pred, true = digit.class.test)
}
get_pred_svm(train.data, test.data)
get_pred_svm <- function(train, test){
digit.class.train <- as.factor(train$label)
train.features <- get_PCA(train)
digit.class.test <- as.factor(test$label)
test.features <- get_PCA(test)
svm.model <- svm(train.features, digit.class.train, cost = 100, gamma = 0.0001)
svm.pred <- predict(svm.model, train.features)
table(pred = svm.pred, true = digit.class.train)
}
get_pred_svm(train.data, test.data)
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
get_pred_svm <- function(train, test){
digit.class.train <- as.factor(train$label)
train.features <- get_PCA(train)
digit.class.test <- as.factor(test$label)
test.features <- get_PCA(test)
svm.model <- svm(train.features, digit.class.train, cost = 100, gamma = 0.0001)
svm.pred <- predict(svm.model, test.features)
table(pred = svm.pred, true = digit.class.test)
}
get_pred_svm(train.data, test.data)
get_pred_svm <- function(train, test){
digit.class.train <- as.factor(train$label)
train.features <- get_PCA(train)
digit.class.test <- as.factor(test$label)
test.features <- get_PCA(test)
svm.model <- svm(train.features, digit.class.train, cost = 100, gamma = 1)
svm.pred <- predict(svm.model, test.features)
table(pred = svm.pred, true = digit.class.test)
}
source('~/.active-rstudio-document')
get_pred_svm <- function(train, test){
digit.class.train <- as.factor(train$label)
train.features <- get_PCA(train)
digit.class.test <- as.factor(test$label)
test.features <- get_PCA(test)
svm.model <- svm(train.features, digit.class.train, cost = 100, gamma = 1)
svm.pred <- predict(svm.model, test.features)
table(pred = svm.pred, true = digit.class.test)
}
get_pred_svm(train.data, test.data)
get_pred_svm <- function(train, test){
digit.class.train <- as.factor(train$label)
train.features <- get_PCA(train)
digit.class.test <- as.factor(test$label)
test.features <- get_PCA(test)
svm.model <- svm(train.features, digit.class.train, gamma =  0.001)
svm.pred <- predict(svm.model, test.features)
table(pred = svm.pred, true = digit.class.test)
}
get_pred_svm(train.data, test.data)
get_pred_svm <- function(train, test){
digit.class.train <- as.factor(train$label)
train.features <- get_PCA(train)
digit.class.test <- as.factor(test$label)
test.features <- get_PCA(test)
svm.model <- svm(train.features, digit.class.train, gamma =  0.001)
svm.pred <- predict(svm.model, train.features)
table(pred = svm.pred, true = digit.class.train)
}
get_pred_svm(train.data, test.data)
install.packages("caret")
library(caret)
get_pred_svm <- function(train, test){
digit.class.train <- as.factor(train$label)
train.features <- get_PCA(train)
digit.class.test <- as.factor(test$label)
test.features <- get_PCA(test)
svm.model <- svm(train.features, digit.class.train, gamma =  0.001)
svm.pred <- predict(svm.model, train.features)
xtab <- table(pred = svm.pred, true = digit.class.train)
confusionMatrix(xtab)
}
get_pred_svm(train.data, test.data)
library(caret)
get_pred_svm <- function(train, test){
digit.class.train <- as.factor(train$label)
train.features <- get_PCA(train)
digit.class.test <- as.factor(test$label)
test.features <- get_PCA(test)
svm.model <- svm(train.features, digit.class.train, gamma =  0.001)
svm.pred <- predict(svm.model, train.features)
confusion.matrix <- table(pred = svm.pred, true = digit.class.train)
accuracy <- sum(diag(confusion.matrix)*100)/sum(confusion.matrix)
}
get_pred_svm(train.data, test.data)
get_pred_svm <- function(train, test){
digit.class.train <- as.factor(train$label)
train.features <- get_PCA(train)
digit.class.test <- as.factor(test$label)
test.features <- get_PCA(test)
svm.model <- svm(train.features, digit.class.train, gamma =  0.001)
svm.pred <- predict(svm.model, train.features)
confusion.matrix <- table(pred = svm.pred, true = digit.class.train)
accuracy <- sum(diag(confusion.matrix)*100)/sum(confusion.matrix)
print(confusion.matrix)
print(accuracy)
}
get_pred_svm(train.data, test.data)
get_pred_svm <- function(train, test){
digit.class.train <- as.factor(train$label)
train.features <- get_PCA(train)
digit.class.test <- as.factor(test$label)
test.features <- get_PCA(test)
svm.model <- svm(train.features, digit.class.train, gamma =  0.001)
svm.pred <- predict(svm.model, test.features)
confusion.matrix <- table(pred = svm.pred, true = digit.class.test)
accuracy <- sum(diag(confusion.matrix)*100)/sum(confusion.matrix)
print(confusion.matrix)
print(accuracy)
}
get_pred_svm(train.data, test.data)
get_PCA <- function(dataset){
dataset.features <- dataset[,!(colnames(dataset) %in% c("label"))]
pr.comp <- prcomp(dataset.features, retx = T, center = T, scale = F)
#finding the total variance contained in the principal components
prin_comp <- summary(pr.comp)
prin_comp.sdev <- data.frame(prin_comp$sdev)
screeplot(pr.comp, type = "lines", main = "Principal Components")
num.of.comp = 250
red.dataset <- prin_comp$x
red.dataset <- red.dataset[,1:num.of.comp]
red.dataset <- data.frame(red.dataset)
return(red.dataset)
}
#Support Vector Machines with linear kernel
get_pred_svm <- function(train, test){
digit.class.train <- as.factor(train$label)
train.features <- get_PCA(train)
digit.class.test <- as.factor(test$label)
test.features <- get_PCA(test)
svm.model <- svm(train.features, digit.class.train, gamma =  0.001)
svm.pred <- predict(svm.model, test.features)
confusion.matrix <- table(pred = svm.pred, true = digit.class.test)
accuracy <- sum(diag(confusion.matrix)*100)/sum(confusion.matrix)
print(confusion.matrix)
print(paste0("The accuracy of the model = ", accuracy))
}
get_pred_svm(train.data, test.data)
get_pred_svm <- function(train, test){
digit.class.train <- as.factor(train$label)
train.features <- get_PCA(train)
digit.class.test <- as.factor(test$label)
test.features <- get_PCA(test)
svm.model <- svm(train.features, digit.class.train, gamma =  0.001)
svm.pred <- predict(svm.model, train.features)
confusion.matrix <- table(pred = svm.pred, true = digit.class.train)
accuracy <- sum(diag(confusion.matrix)*100)/sum(confusion.matrix)
print(confusion.matrix)
print(paste0("The accuracy of the model = ", accuracy))
}
get_pred_svm(train.data, test.data)
get_pred_svm <- function(train, test){
digit.class.train <- as.factor(train$label)
train.features <- get_PCA(train)
digit.class.test <- as.factor(test$label)
test.features <- get_PCA(test)
svm.model <- svm(train.features, digit.class.train, gamma =  0.001)
svm.pred <- predict(svm.model, train.features)
#   confusion.matrix <- table(pred = svm.pred, true = digit.class.train)
#   accuracy <- sum(diag(confusion.matrix)*100)/sum(confusion.matrix)
#   print(confusion.matrix)
#   print(paste0("The accuracy of the model = ", accuracy))
print(svm.pred)
}
get_pred_svm(train.data, test.data)
a = magic(3)
matrix
?matrix
a = matrix(1:9)
a
a = matrix(1:9,3)
a
a = matrix(3,1:9)
a
a = matrix(1:9,3)
a
b = 1
c = list(b,a)
c
c = list(b = b,a = a)
c
get_PCA <- function(dataset){
dataset.features <- dataset[,!(colnames(dataset) %in% c("label"))]
pr.comp <- prcomp(dataset.features, retx = T, center = T, scale = F)
#finding the total variance contained in the principal components
prin_comp <- summary(pr.comp)
prin_comp.sdev <- data.frame(prin_comp$sdev)
print(paste0("Total variance = ",sum(prin_comp.sdev)))
screeplot(pr.comp, type = "lines", main = "Principal Components")
num.of.comp = 250
red.dataset <- prin_comp$x
red.dataset <- red.dataset[,1:num.of.comp]
red.dataset <- data.frame(red.dataset)
return(red.dataset)
}
get_PCA(test.data)
get_PCA <- function(dataset){
dataset.features <- dataset[,!(colnames(dataset) %in% c("label"))]
pr.comp <- prcomp(dataset.features, retx = T, center = T, scale = F)
#finding the total variance contained in the principal components
prin_comp <- summary(pr.comp)
prin_comp.sdev <- data.frame(prin_comp$sdev)
print(paste0("Total variance = ",sum(prin_comp.sdev)))
screeplot(pr.comp, type = "lines", main = "Principal Components")
num.of.comp = 250
red.dataset <- prin_comp$x
red.dataset <- red.dataset[,1:num.of.comp]
red.dataset <- data.frame(red.dataset)
#return(red.dataset)
}
get_PCA(te)
get_PCA(test.data)
get_PCA <- function(dataset){
dataset.features <- dataset[,!(colnames(dataset) %in% c("label"))]
pr.comp <- prcomp(dataset.features, retx = T, center = T, scale = F)
#finding the total variance contained in the principal components
prin_comp <- summary(pr.comp)
prin_comp.sdev <- data.frame(prin_comp$sdev)
print(paste0("Total variance = ",sum(prin_comp.sdev)))
print(paste0("Contained variance = ",sum(prin_comp.sdev[1:250])))
screeplot(pr.comp, type = "lines", main = "Principal Components")
num.of.comp = 250
red.dataset <- prin_comp$x
red.dataset <- red.dataset[,1:num.of.comp]
red.dataset <- data.frame(red.dataset)
#return(red.dataset)
}
get_PCA(test.data)
dim(prin_comp.sdev)
get_PCA <- function(dataset){
dataset.features <- dataset[,!(colnames(dataset) %in% c("label"))]
pr.comp <- prcomp(dataset.features, retx = T, center = T, scale = F)
#finding the total variance contained in the principal components
prin_comp <- summary(pr.comp)
prin_comp.sdev <- data.frame(prin_comp$sdev)
print(paste0("Total variance = ",sum(prin_comp.sdev)))
print(paste0("Contained variance = ",sum(prin_comp.sdev[1:250,])))
screeplot(pr.comp, type = "lines", main = "Principal Components")
num.of.comp = 250
red.dataset <- prin_comp$x
red.dataset <- red.dataset[,1:num.of.comp]
red.dataset <- data.frame(red.dataset)
#return(red.dataset)
}
get_PCA(test.data)
get_PCA <- function(dataset){
dataset.features <- dataset[,!(colnames(dataset) %in% c("label"))]
pr.comp <- prcomp(dataset.features, retx = T, center = T, scale = F)
#finding the total variance contained in the principal components
prin_comp <- summary(pr.comp)
prin_comp.sdev <- data.frame(prin_comp$sdev)
print(paste0("%age of variance contained = ", sum(prin_comp.sdev)/sum(prin_comp.sdev[1:250,])))
screeplot(pr.comp, type = "lines", main = "Principal Components")
num.of.comp = 250
red.dataset <- prin_comp$x
red.dataset <- red.dataset[,1:num.of.comp]
red.dataset <- data.frame(red.dataset)
#return(red.dataset)
}
get_PCA(test.data)
get_PCA <- function(dataset){
dataset.features <- dataset[,!(colnames(dataset) %in% c("label"))]
pr.comp <- prcomp(dataset.features, retx = T, center = T, scale = F)
#finding the total variance contained in the principal components
prin_comp <- summary(pr.comp)
prin_comp.sdev <- data.frame(prin_comp$sdev)
print(paste0("%age of variance contained = ", sum(prin_comp.sdev[1:250,])/sum(prin_comp.sdev)))
screeplot(pr.comp, type = "lines", main = "Principal Components")
num.of.comp = 250
red.dataset <- prin_comp$x
red.dataset <- red.dataset[,1:num.of.comp]
red.dataset <- data.frame(red.dataset)
#return(red.dataset)
}
get_PCA(test.data)
get_PCA(train.data)
get_PCA <- function(dataset){
dataset.features <- dataset[,!(colnames(dataset) %in% c("label"))]
pr.comp <- prcomp(dataset.features, retx = T, center = T, scale = F)
#finding the total variance contained in the principal components
prin_comp <- summary(pr.comp)
prin_comp.sdev <- data.frame(prin_comp$sdev)
print(paste0("%age of variance contained = ", sum(prin_comp.sdev[1:500,])/sum(prin_comp.sdev)))
screeplot(pr.comp, type = "lines", main = "Principal Components")
num.of.comp = 250
red.dataset <- prin_comp$x
red.dataset <- red.dataset[,1:num.of.comp]
red.dataset <- data.frame(red.dataset)
#return(red.dataset)
}
get_PCA(train.data)
rm(a,b,c)
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 5, svm)
do_cv_class(train.data, 5, svm)
do_cv_class(train.data, 5, svm)
do_cv_class(train.data, 5, 5nn)
do_cv_class(train.data, 5, "svm")
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 5, "svm")
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 5, "svm")
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 5, "svm")
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 5, "svm")
do_cv_class(train.data, 10, "svm")
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 10, "svm")
svm.model <- svm(train.features, digit.class.train, cost = 100, gamma =  0.03)
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 10, "svm")
do_cv_class(train.data, 5, "svm")
do_cv_class(train.data, 5, "svm")
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 5, "svm")
get_pred_knn(train,test){
digit.class.train <- as.factor(train$label)
train.features <- get_PCA(train)
digit.class.test <- as.factor(test$label)
test.features <- get_PCA(test)
knn.model <- knn(train.features, test.features, digit.class.train)
return(knn.model)
}
install.packages("class")
install.packages("class")
get_pred_knn(train,test){
digit.class.train <- as.factor(train$label)
train.features <- get_PCA(train)
digit.class.test <- as.factor(test$label)
test.features <- get_PCA(test)
knn.model <- knn(train.features, test.features, digit.class.train)
return(knn.model)
}
get_pred_knn <- function(train,test){
digit.class.train <- as.factor(train$label)
train.features <- get_PCA(train)
digit.class.test <- as.factor(test$label)
test.features <- get_PCA(test)
knn.model <- knn(train.features, test.features, digit.class.train)
return(knn.model)
}
do_cv_class(train.data, 5, "20nn")
debugSource('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 5, "20nn")
do_cv_class(train.data, 5, "20nn")
debugSource('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 5, "20nn")
debugSource('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 5, "20nn")
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 5, "20nn")
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 5, "20nn")
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 3, "20nn")
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 3, "20nn")
do_cv_class(train.data, 10, "20nn")
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 5, "20nn")
do_cv_class(train.data, 5, "20nn")
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 5, "20nn")
?knn
get_pred_knn <- function(train,test,k){
digit.class.train <- as.factor(train$label)
train.features <- get_PCA(train)
digit.class.test <- as.factor(test$label)
test.features <- get_PCA(test)
knn.model <- knn(train.features, test.features, digit.class.train, k = k)
return(knn.model)
}
do_cv_class(train.data, 5, "20nn")
source('~/.active-rstudio-document')
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 5, "20nn")
do_cv_class(train.data, 10, "50nn")
install.packages("R.matlab")
library(R.matlab)
train.data <- readMat("ex4data1.mat")
train.data$X
train.data <- unlist(train.data)
train.data <- readMat("ex4data1.mat")
train.data.features <- train.data$X
View(train.data.features)
dim(train.data.features)
train.data.features <- data.frame(train.data$X)
train.data.output <- data.frame(train.data$y)
train.data <- data.frame(cbind(train.data.features,train.data.output))
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 10, "50nn")
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 10, "50nn")
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 10, "50nn")
dim(train.data.features)
train.data <- readMat("ex4data1.mat")
train.data.features <- data.frame(train.data$X)
train.data.output <- data.frame(train.data$y)
train.data <- data.frame(cbind(train.data.features,label = train.data.output))
View(train.data)
colnames(train.data)
train.data <- data.frame(cbind(train.data.features,"label" = train.data.output))
colnames(train.data)
train.data <- data.frame(train.data.features,"label" = train.data.output)
colnames(train.data)
train.data.output <- data.frame(label = train.data$y)
train.data <- data.frame(train.data.features,"label" = train.data.output)
train.data <- data.frame(train.data.features,train.data.output)
train.data.output <- data.frame(label = train.data$y)
colnames(train.data.output)
colnames(train.data.output) = "label"
colnames(train.data.output) <- c("label")
colnames(train.data.output) <- c("label")
train.data.output <- data.frame(label = train.data$y)
train.data.output
train.data.output <- data.frame(train.data$y)
train.data <- readMat("ex4data1.mat")
train.data.features <- data.frame(train.data$X)
train.data.output <- data.frame(train.data$y)
train.data <- readMat("ex4data1.mat")
train.data.features <- data.frame(train.data$X)
train.data.output <- data.frame(label = train.data$y)
View(train.data.output)
train.data <- data.frame(train.data.features,train.data.output)
source('~/.active-rstudio-document')
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 10, "50nn")
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 10, "50nn")
do_cv_class(train.data, 5, "svm")
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 10, "50nn")
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
source('~/.active-rstudio-document')
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 10, "50nn")
names(train.data[, sapply(df, function(v) var(v, na.rm=TRUE)==0)])
names(train.data[, sapply(train.data, function(v) var(v, na.rm=TRUE)==0)])
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 10, "50nn")
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 10, "50nn")
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 10, "50nn")
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 5, "svm")
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
do_cv_class(train.data, 5, "svm")
?svm
??svm
library(e1071)
?svm
get_pred_knn <- function(train,test){
digit.class.train <- as.factor(train$label)
train.features <- train[,!colnames(train) %in% "label"]
svm.mode <- svm(train.features, digit.class.train, cost = 1000, gamma = 1/ncol(train.features), kernel = "radial")
result <- (0:9)[predict(svm.model, test)]
return(result)
}
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
result <- get_output(train.data, test.data)
source('~/Assignments/Machine Learning/Digit Recognition/DigitRecognizer/Digitrecognizer.R')
result <- get_output(train.data, test.data)
